import nltk
from nltk.corpus import stopwords
from nltk.cluster.util import cosine_distance
import numpy as np
import networkx as nx
import re
def read_article(file_name):
    with open(file_name, 'r', encoding='utf-8-sig') as file:
        filedata = file.readlines()
    article = filedata[0].split(". ")
    processed_sentences = []
    for sentence in article:
        cleaned_sentence = re.sub(r"[^a-zA-Z\s]", " ", sentence)
        processed_sentences.append(cleaned_sentence.split())
    # Remove any empty sentences
    processed_sentences = [s for s in processed_sentences if s]
    return processed_sentences
def sentences_similarity(sent1, sent2, stopwords=None):
    if stopwords is None:
        stopwords = []
    sent1 = [w.lower() for w in sent1 if w.lower() not in stopwords]
    sent2 = [w.lower() for w in sent2 if w.lower() not in stopwords]
    all_words = list(set(sent1 + sent2))
    if len(sent1) == 0 or len(sent2) == 0:
        return 0.0  # Return 0 for empty sentences
    vector1 = [0] * len(all_words)
    vector2 = [0] * len(all_words)
    for w in sent1:
        vector1[all_words.index(w)] += 1
    for w in sent2:
        vector2[all_words.index(w)] += 1
    # Avoid division by zero
    if np.dot(vector1, vector1) == 0 or np.dot(vector2, vector2) == 0:
        return 0.0  
    return 1 - cosine_distance(vector1, vector2)
def gen_sim_matrix(sentences, stop_words):
    similarity_matrix = np.zeros((len(sentences), len(sentences)))
    for idx1 in range(len(sentences)):
        for idx2 in range(len(sentences)):
            if idx1 == idx2:
                continue
            similarity_matrix[idx1][idx2] = sentences_similarity(sentences[idx1], sentences[idx2], stop_words)
    return similarity_matrix
def generate_summary(file_name, top_n=5):
    stop_words = stopwords.words('english')
    summarize_text = []
    sentences = read_article(file_name)
    # Check if there are enough sentences
    if len(sentences) < top_n:
        top_n = len(sentences)
    sentences_similarity_matrix = gen_sim_matrix(sentences, stop_words)
    sentence_similarity_graph = nx.from_numpy_array(sentences_similarity_matrix)
    try:
        scores = nx.pagerank(sentence_similarity_graph)
    except nx.PowerIterationFailedConvergence:
        print("PageRank failed to converge. Please check your sentences and similarity matrix.")
        return
    ranked_sentence = sorted(((scores[i], s) for i, s in enumerate(sentences)), reverse=True)
    for i in range(top_n):
        summarize_text.append(" ".join(ranked_sentence[i][1]))
    print("Summary \n", ". ".join(summarize_text))
# Run the function
generate_summary("msft.txt", 2)
